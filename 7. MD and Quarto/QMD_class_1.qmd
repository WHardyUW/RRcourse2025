---
title: "Quarto"
author: "Wojciech Hardy"
date: "04/09/2023"
format: html
execute:
  echo: fenced
---

```{r}
#| label = "setup",
#| include = FALSE
library(chron)
library(reticulate)
```

------------------------------------------------------------------------

# Three key elements

## The YAML header

At the very top. Stores author and document information, configuration, global options, inputs, styles, format specifications, etc. This document uses:

<pre class="code-block">
---
title: "Quarto"
author: "Wojciech Hardy"
date: "4/11/2023"
format: html
execute:
  echo: fenced
---
</pre>

## Markdown

The markup language, with easy and nice editing options.

## Code chunks

Where the magic happens - codes whose output becomes a part of the document.

Let's start with Markdown!

------------------------------------------------------------------------

# Switching from RMarkdown?

[Might want to take a look](https://quarto.org/docs/faq/rmarkdown.html)

------------------------------------------------------------------------

Consider the Source vs Visual mode and Rendering on Save options.

---

# Cheatsheets are handy as always

(this is how you do links in Markdown by the way)

`[A Markdown cheatsheet](https://www.markdownguide.org/cheat-sheet/)`

`[A Quarto cheat sheet](https://res.cloudinary.com/dyd911kmh/image/upload/v1676540721/Marketing/Blog/Quarto_Cheat_Sheet.pdf)`

[A Markdown cheatsheet](https://www.markdownguide.org/cheat-sheet/)

[A Quarto cheat sheet](https://res.cloudinary.com/dyd911kmh/image/upload/v1676540721/Marketing/Blog/Quarto_Cheat_Sheet.pdf)

------------------------------------------------------------------------

# Basic formatting

Some basic text formatting includes `*Italics*` or `_Italics_` (*Italics*) and `**Bold**` or `__Bold__` (**Bold**) text. ***Bold***

Some text
sdajiodf

Some text  
sdajiodf

Some text

sdajiodf


Superscripts can be done like so: `R^2^` R^2^

Subscripts can be done like so: `H~2~O` H~2~O

------------------------------------------------------------------------

# Headers

`# Header 1`

# Header 1

`## Header 2`

## Header 2

`### Header 3`

### Header 3

`#### Header 4`

#### Header 4

`##### Header 5`

##### Header 5

------------------------------------------------------------------------

# Lists

## Ordered

`1. Item 1`

`2. Item 2`

`2. Item 3 # Note the error in numbering`

1.  Item 1

2.  Item 2

3.  Item 3 `# It's fine here though`

## Unordered

`* Item`

`* Another item`

-   Item

-   Another item

## Subitems

`1.  Item 1`

`-   Item 2`

`-   Item 3`

1.  Item 1
    -   Item 2
    -   Item 3

------------------------------------------------------------------------

# Tables

| Day       | Hour  | Group |
|:----------|:-----:|------:|
| Wednesday | 9:45  |     1 |
| Thursday  | 16:45 |     2 |
| Thursday  | 18:30 |     3 |

(this is a raw Markdown approach)

------------------------------------------------------------------------

# Quotes

`> Hmmm`

> Hmmm

\- Geralt of Rivia

------------------------------------------------------------------------

# Using Html

You can also just use html to write stuff within the Markdown document (when rendering into html). Here's something copied and pasted directly from YAML Wikipedia page source code:

<table class="infobox"><caption class="infobox-title" style="padding-bottom:0.15em;">YAML</caption><tbody><tr><td colspan="2" class="infobox-image"><a href="/wiki/File:Official_YAML_Logo.svg" class="image"><img alt="Official YAML Logo.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Official_YAML_Logo.svg/64px-Official_YAML_Logo.svg.png" decoding="async" width="64" height="59" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Official_YAML_Logo.svg/96px-Official_YAML_Logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Official_YAML_Logo.svg/128px-Official_YAML_Logo.svg.png 2x" data-file-width="512" data-file-height="471"></a></td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;"><a href="/wiki/Filename_extension" title="Filename extension">Filename extensions</a></th><td class="infobox-data" style="line-height:1.35em;"><code class="mw-highlight mw-highlight-lang-text mw-content-ltr" id="" style="" dir="ltr">.yaml</code>, <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" id="" style="" dir="ltr">.yml</code></td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;"><a href="/wiki/Media_type" title="Media type">Internet media&nbsp;type</a></th><td class="infobox-data" style="line-height:1.35em;"><i>Not registered</i></td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;">Initial release</th><td class="infobox-data" style="line-height:1.35em;">11&nbsp;May 2001<span class="noprint">; 21 years ago</span><span style="display:none">&nbsp;(<span class="bday dtstart published updated">2001-05-11</span>)</span></td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;"><a href="/wiki/Software_release_life_cycle" title="Software release life cycle">Latest release</a></th><td class="infobox-data" style="line-height:1.35em;"><div style="display: inline-block; line-height: 1.2em; padding: .1em 0;">1.2 (Revision 1.2.2)<br>1&nbsp;October 2021<span class="noprint">; 18 months ago</span><span style="display:none">&nbsp;(<span class="bday dtstart published updated">2021-10-01</span>)</span> </div></td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;">Type of format</th><td class="infobox-data" style="line-height:1.35em;">Data interchange</td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;"><span class="nowrap"><a href="/wiki/Open_file_format" title="Open file format">Open format</a>?</span></th><td class="infobox-data" style="line-height:1.35em;">Yes</td></tr><tr><th scope="row" class="infobox-label" style="line-height:1.2em; padding-right:0.65em;">Website</th><td class="infobox-data" style="line-height:1.35em;"><span class="url"><a rel="nofollow" class="external text" href="https://yaml.org">yaml<wbr>.org</a></span></td></tr></tbody></table>

------------------------------------------------------------------------

# Equations

You can insert equations with the same syntax as in LaTeX (MathJax). E.g. within a sentence `$ \sum (x + 1) $` $\sum (x + 1)$ or as standalone with double `$$` at start and finish

$$\int_{-\infty}^{\infty}1/(b-a) dx$$

# Using code chunks in Quarto

The main thing, however, is the ability to integrate coding within the document:

```{r}

```

```{python}

```




```{r}
cat("This is a code chunk")
```

(Also see running within the editor mode)


```{r}
summary(cars)
```

```{r}
plot(pressure)
```

You can also [use Python in Quarto with Jupyter Notebook](https://quarto.org/docs/computations/python.html) or even use it interchangeably with other languages:

```{python}
# import pandas
# flights = pandas.read_csv("../Data/flights.csv")
# flights = flights[flights['dest'] == "ORD"]
# flights = flights[['carrier', 'dep_delay', 'arr_delay']]
# flights = flights.dropna()
```

```{r}
library(ggplot2)
# ggplot(py$flights, aes(carrier, arr_delay)) + geom_point() + geom_jitter()
# 
# cat("Example from: https://rstudio.github.io/reticulate/articles/r_markdown.html")
```

And a nice table alternative -\> `kable` from the `knitr` package.

```{r}
knitr::kable(head(mtcars[, 1:4]), caption = "A kable table, ver 1")
```

```{r}
knitr::kable(head(mtcars[, 1:4]), "html", caption = "A kable table, ver 2")
```

------------------------------------------------------------------------

# Code chunks customisation

([Partially taken from here](https://bookdown.org/yihui/rmarkdown-cookbook/hide-one.html))

## Chunk naming (for reference and navigation)

```{r}
#| label = "chunk_name"
"You specify it as a label"
```

## Using variables as parameters

```{r}
typical_width <- 4
typical_height <- 4
```

```{r}
#| fig.width = typical_width,
#| fig.height = typical_height
plot(cars)
```

## Using variables within the text `'r variable'`

We have previously set a typical width to 'r typical_width' and the typical height to 'r typical_height'.

We have previously set a typical width to `r typical_width` and the typical height to `r typical_height`.

## Other figure options

```{r}
#| label: fig-cars
#| fig-cap: "City and highway mileage for 38 popular models of cars."
#| fig-alt: "Scatterplot of city vs. highway mileage for cars, where points are colored by the number of cylinders. The plot displays a positive, linear, and strong relationship between city and highway mileage, and mileage increases as the number of cylinders decreases."
#| fig-width: 6
#| fig-height: 3.5

ggplot(mpg, aes(x=hwy, y=cty, color=cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_c() + 
  theme_minimal()
```

And you can refer to @fig-cars (`@fig-cars`) in-text! 

You can also control the layout:

```{r}
#| label: fig-mpg
#| fig-cap: "City and highway mileage for 38 popular models of cars."
#| fig-subcap:
#|   - "Color by number of cylinders"
#|   - "Color by engine displacement, in liters"
#| layout-ncol: 2
#| column: page

ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_c() +
  theme_minimal()

ggplot(mpg, aes(x = hwy, y = cty, color = displ)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_c(option = "E") +
  theme_minimal()

```

## Conditional execution with `eval`

(`is.weekend` comes from the `chron` package)

```{r}
#| eval = is.weekend(Sys.Date())
cat("It's the weekend! :)")
```

```{r}
#| eval = !is.weekend(Sys.Date())
cat("It's not the weekend! :(")
```

## Handling errors

```{r}
#| error = TRUE
543 + "clearly a text and not a number"
```

By default Quarto stops after encountering an error. We can tell it to continue.

## Caching results that take long to compute

```{r}
x <- 15
```

```{r}
#| label = "slow_chunk",
#| cache = TRUE
Sys.sleep(10)
a <- 5 + x
a
```

The chunk gets reevaluated if anything changes within the chunk. **Make sure you know what you're doing when caching**.

We can use `cache.extra =` to specify additional conditions for cache invalidation (i.e. to repeat the calculations), e.g.:

-   file.mtime('filename') \# Modification time of the file changed

-   tools::md5sum('filename') \# Content of the file changed

-   getRversion() \# R version changed

-   etc.

Other stuff:

-   `cache-comments` -- if you don't want to recalculate after changing a comment.

-   `cache-lazy` -- loading with lazyload() instead of load() (see [Lazy loading](https://en.wikipedia.org/wiki/Lazy_loading))

-   `cache-vars` -- cache specified objects

-   `dependson` -- reevaluate conditional on a change in a different chunk (or chunks)

-   `autodep` -- will try to find the between-chunk dependencies on its own

## Keeping your report nice and clear

### Hide the source code with `echo=FALSE`

```{r}
#| echo = TRUE

1+1

```

### Hide messages (e.g. when loading stuff) with `message=FALSE`

```{r}
#| message = FALSE

message("You will not see the message.")

```

### Hide warnings with `warning=FALSE`

```{r}
#| warning = FALSE

1:2 + 1:3

```

### Hide plots with `fig.show='hide'`

```{r}
#| fig.show = "hide"

plot(cars)

```

### Hide everything from the chunk with `include=FALSE`

```{r}
#| include = FALSE

cat("Some words")
3 + 4
# comment
plot(cars)

```

### Hide the results with `results='hide'`

```{r}
#| results = "hide"

a*typical_height*typical_width
  
```

### Generate Markdown content with R code with `results='asis'`

```{r}
#| results = "asis"

for (i in 1:10) {
  cat("- Item", i, "\n")
}
```

(Note that it got interpreted as Markdown markup writing!)

------------------------------------------------------------------------

# ASSIGNMENT

Pick a TV show that had its premieres on TV and thus has some viewership numbers reported on Wikipedia.

Then create a short report (you can copy the content from Wikipedia or other pages for this task) that contains, for example:

(try doing more than one commit for this, i.e. divide your work into steps!)

1. **A brief description of the show**
- *Modern Family* is an American television sitcom, created by Steven Levitan and Christopher Lloyd, that aired on ABC for 11 seasons from September 23, 2009, to April 8, 2020. The series follows the lives of three diverse but interrelated family set-ups living in suburban Los Angeles.
2. **A photo with the logo or a shot from the show itself.**
<div style="text-align: center;">
  ![Modern Family Logo](../Data/modern-family.jpg)
</div>

3.  **A summary of some basic statistics (e.g. on viewership or ratings).**
```{r}
# Load the knitr package for table formatting
library(knitr)

# Create a data frame with Modern Family season info
df <- data.frame(
  Season = 1:11,  # Season numbers
  Episodes = c(24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 18),  # Number of episodes per season
  First_Released = c("September 23, 2009", "September 22, 2010", "September 21, 2011",
                     "September 26, 2012", "September 25, 2013", "September 24, 2014",
                     "September 23, 2015", "September 21, 2016", "September 27, 2017",
                     "September 26, 2018", "September 25, 2019"),  # First air date
  Last_Released = c("May 19, 2010", "May 25, 2011", "May 23, 2012", "May 22, 2013", 
                    "May 21, 2014", "May 20, 2015", "May 18, 2016", "May 17, 2017", 
                    "May 16, 2018", "May 8, 2019", "April 8, 2020"),  # Last air date
  Rank = c(36, 24, 15, 18, 19, 24, 36, 34, 58, 65, 48),  # Nielsen rating rank
  Average_Viewers = c(9.49, 11.89, 12.93, 12.31, 11.79, 11.91, 9.83, 8.79, 7.09, 6.40, 7.10)  # Avg. viewers in millions
)

# Generate a basic table using kable
kable(df, caption = "Modern Family Season Overview", align = "c")
```
- Despite the decline in viewership numbers each season, *Modern Family* consistently maintained high ratings among the 18-49 demographic. The show won multiple Emmy Awards for Outstanding Comedy Series and is regarded as one of the most iconic modern sitcoms.

4.  **A graph of the viewership over time.**
```{r}
# Load the necessary libraries
library(ggplot2)

# Create the bar plot of viewership over time
ggplot(df, aes(x = factor(Season), y = Average_Viewers)) + 
  geom_bar(stat = "identity", fill = "lightgray", color = "lightgray") +  
  geom_text(aes(label = Average_Viewers), color = "black", vjust = -0.5) +  
  labs(title = "Modern Family Viewership Over Time (Season 1-11)",  
       x = "Season",  
       y = "Average Viewers (in millions)") +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Merged both definitions
        plot.title = element_text(hjust = 0.5)) 
```

5.  **A graph of the episode-to-episode (or season-to-season) changes in viewership.**
```{r}
# Calculate the change in viewership between each season
df$Change_Viewers <- c(NA, diff(df$Average_Viewers))

# Create the step plot with annotations of the change between seasons
ggplot(df, aes(x = Season, y = Average_Viewers)) +
  geom_step(color = "blue", size = 1) +  # Step plot line with blue color
  geom_point(color = "yellow", size = 3) +   # Red points for each data point
  geom_text(aes(label = ifelse(!is.na(Change_Viewers), 
                               paste0("Change: ", round(Change_Viewers, 2)), 
                               "")),  # Label the change between seasons
            color = "black", vjust = -0.5, size = 3) +  # Adjust label position and size
  labs(title = "Season-to-Season Viewership Changes in Step Plot",  # Title
       x = "Season",  # X-axis label
       y = "Average Viewers (in millions)") +  # Y-axis label
  theme_minimal() +  # Use minimal theme for cleaner appearance
  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
        plot.title = element_text(hjust = 0.5))  # Center the plot title

```

6.  A short description of the observed changes that includes inline references to numbers (e.g. the viewership decreased by `insert_calculated_number` between seasons 3 and 5).
```{r}
# Introductory statement
intro <- "The viewership of Modern Family experienced significant changes across seasons."

# Generate a short description with inline references to viewership changes
paragraphs <- vector("list", length = 10)

# Loop through each season pair (1-2, 2-3, etc.)
for (i in 1:10) {
  change_value <- df$Change_Viewers[i + 1]  # Change in viewers between consecutive seasons
  
  # Only proceed if the change value is valid (not NULL or NA)
  if (!is.na(change_value)) {
    direction <- ifelse(change_value > 0, "increased", "decreased")
    paragraphs[[i]] <- paste(
      "- The viewership", direction, "by", round(abs(change_value), 2), "million viewers between season", i, "and season", i + 1, "."
    )
  }
}

# Remove any NULL entries from the list (if any)
paragraphs <- paragraphs[!sapply(paragraphs, is.null)]

# Print the introductory statement followed by each paragraph with a newline for separation
cat(intro, "\n\n", paste(paragraphs, collapse = "\n\n"))
```
7.  Make sure your report looks nice -\> this time we're mostly interested in the output and not necessarily the codes used to achieve it.
8.  `render` your report and save it in the relevant folder of your repo.
9.  Commit the changes and push them to Github.
