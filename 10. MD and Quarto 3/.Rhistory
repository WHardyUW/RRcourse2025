truth = y_test,
prediction = y_pred
)
# Accuracy
accuracy_val <- accuracy(results, truth = truth, estimate = prediction)
library(dplyr)
library(yardstick)
# Ensure both truth and prediction are factors
results <- tibble(
truth = factor(y_test),
prediction = factor(y_pred, levels = levels(factor(y_test)))  # ensure consistent levels
)
# Accuracy
accuracy_val <- accuracy(results, truth = truth, estimate = prediction)
print(accuracy_val)
# F1 Score (macro-averaged)
f1_val <- f_meas(results, truth = truth, estimate = prediction, estimator = "macro")
print(f1_val)
# Print best hyperparameters
cat("Best hyperparameters:\n")
print(grid_search$bestTune)
# Accuracy
cat("\nAccuracy:\n")
print(accuracy_val)
# F1 Score
cat("\nF1 Score (macro):\n")
print(f1_val)
# Confusion Matrix
cat("\nConfusion Matrix:\n")
print(conf_matrix$table)
# Classification Report (precision, recall, F1 for each class)
cat("\nClassification Report:\n")
print(conf_matrix$byClass)
# Ensure libraries are loaded
library(caret)
library(yardstick)
library(dplyr)
# Ensure y_test and y_pred are factors with the same levels
y_test_factor <- factor(y_test)
y_pred_factor <- factor(y_pred, levels = levels(y_test_factor))
# Create tibble for yardstick metrics
results <- tibble(
truth = y_test_factor,
prediction = y_pred_factor
)
# Best hyperparameters
cat("Best hyperparameters:\n")
print(grid_search$bestTune)
# Accuracy
accuracy_val <- accuracy(results, truth = truth, estimate = prediction)
cat("\nAccuracy:\n")
print(accuracy_val$.estimate)
# F1 Score (weighted approximation: use "macro" or "micro" as needed)
f1_val <- f_meas(results, truth = truth, estimate = prediction, estimator = "macro")
cat("\nF1 Score (macro avg):\n")
print(f1_val$.estimate)
# Confusion Matrix
conf_matrix <- confusionMatrix(y_pred_factor, y_test_factor)
cat("\nConfusion Matrix:\n")
print(conf_matrix$table)
# Classification Report (per-class precision, recall, F1)
cat("\nClassification Report:\n")
print(conf_matrix$byClass)
library(recipes)
library(dplyr)
# Step 1: Identify categorical variables
categorical_vars <- X %>%
select(where(is.character)) %>%
names()
# Step 2: Create the preprocessing recipe
rec <- recipe(`Recall Type` ~ ., data = train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "missing") %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE)
library(recipes)
library(dplyr)
# Step 1: Identify categorical variables
categorical_vars <- X %>%
select(where(is.character)) %>%
names()
# Step 2: Create the preprocessing recipe
rec <- recipe(`Recall Type` ~ ., data = train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "missing") %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE)
# Display the first few rows of data_cleaned excluding specified columns
columns_to_exclude <- c('Recall Link', 'Mfr Campaign Number', 'Report Received Date', 'NHTSA ID')
# Exclude the specified columns
data_excluded <- data_excluded %>%
rename(Recall_Type = `Recall Type`)
# Display the resulting DataFrame
head(data_excluded) |>
gt() |>
tab_caption("First few rows of the cleaned dataset")
# Define feature columns and target column
library(dplyr)
X <- data_excluded %>%
select(
Manufacturer,
Subject,
Component,
`Potentially Affected`,
`Consequence Summary`,
`Corrective Action`,
`Park Outside Advisory`,
`Do Not Drive Advisory`,
`Completion Rate % (Blank - Not Reported)`
)
y <- data_excluded$`Recall Type`
library(recipes)
library(dplyr)
# Step 1: Identify categorical variables
categorical_vars <- X %>%
select(where(is.character)) %>%
names()
# Step 2: Create the preprocessing recipe
rec <- recipe(`Recall Type` ~ ., data = train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "missing") %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE)
library(recipes)
library(dplyr)
# Step 1: Identify categorical variables
categorical_vars <- X %>%
select(where(is.character)) %>%
names()
# Step 2: Create the preprocessing recipe
rec <- recipe(Recall_Type ~ ., data = train_data)
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load("../Data/season_1.RData")
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git")
load("../Data/season_1.RData")
load("/Data/season_1.RData")
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load("/Data/season_1.RData")
load("season_1.RData")
getwd()
load("season_1.RData")
load("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data/Data/season_1.RData")
load(paste0("../Data/got/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data/season_1.RData")
/Data/season_
load(paste0("../Data/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load(paste0("../Data/season_", params$season_no, ".RData"))
load("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data/season_", params$season_no, ".RData")
file.exists(paste0("../Data/season_", params$season_no, ".RData"))
getwd()
setwd("..")  # Move one level up if needed
setwd("Data")  # Navigate to the correct folder
load("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data/season_", params$season_no, ".RData")
load(paste0("../Data/season_", params$season_no, ".RData"))
library(here)
install.packages("here")
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
episodes_no <- nrow(season_data)
date_start <- season_data$premiere_date[1]
date_end <- season_data$premiere_date[episodes_no]
viewers <- mean(season_data$viewers)
viewers_start <- season_data$viewers[1]
viewers_end <- season_data$viewers[episodes_no]
max_viewers <- max(season_data$viewers)
top_episode_desc <- season_data$description[season_data$viewers==max_viewers]
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
season_data[season_data$viewers > mean(season_data$viewers), c("no_season", "title", "directed_by")]
#| label = "viewers_plot"
plot(season_data$viewers,
type = "l",
col = "red",
lwd = 5,
xlab = "Episode number",
ylab = "1st day TV viewers in the US (millions)",
main = paste("Season", params$season, "Viewership by Episode"))
above_avg <- which(season_data$viewers > mean(season_data$viewers))
summary_table <- data.frame(
Episode = above_avg,
Title = season_data$title[above_avg],
Director = season_data$director[above_avg]
)
season_data[season_data$viewers > mean(season_data$viewers), c("no_season", "title", "directed_by")]
knitr::kable(summary_table)
knitr::kable(summary_table)
episodes_no <- nrow(season_data)
date_start <- season_data$premiere_date[1]
date_end <- season_data$premiere_date[episodes_no]
viewers <- mean(season_data$viewers)
viewers_start <- season_data$viewers[1]
viewers_end <- season_data$viewers[episodes_no]
max_viewers <- max(season_data$viewers)
top_episode_desc <- season_data$description[season_data$viewers==max_viewers]
knitr::kable(summary_table)
above_avg <- which(season_data$viewers > mean(season_data$viewers))
summary_table <- data.frame(
Episode = above_avg,
Title = season_data$title[above_avg],
Director = season_data$director[above_avg]
)
above_avg <- which(season_data$viewers > mean(season_data$viewers))
summary_table <- data.frame(
Episode = above_avg,
Title = season_data$title[above_avg],
Director = season_data$directed_by[above_avg]
)
knitr::kable(summary_table)
knitr::kable(summary_table)
season_data[season_data$viewers > mean(season_data$viewers), c("no_season", "title", "directed_by")]
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
getwd()
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
load(paste0("../Data/got/season_", params$season_no, ".RData"))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
setwd("..")  # Move one level up if needed
setwd("Data")  # Navigate to the correct folder
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
setwd("..")  # Move one level up if needed
setwd("Data")  # Navigate to the correct folder
getwd()
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git"/Data)  # Move one \
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")  # Move one \
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load(paste0("season_", params$season_no, ".RData"))
library(here)
load(here("Data", paste0("season_", params$no_season, ".RData")))
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load(paste0("season_", params$no_season, ".RData"))
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load(paste0("season_", params$no_season, ".RData"))
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git/Data")
load(paste0("season_", params$no_season, ".RData"))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
library(here)
load(here("Data", paste0("season_", params$season_no, ".RData")))
above_avg <- which(season_data$viewers > mean(season_data$viewers))
summary_table <- data.frame(
Episode = above_avg,
Title = season_data$title[above_avg],
Director = season_data$directed_by[above_avg]
)
knitr::kable(summary_table)
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
load(params$data_file)
load(params$data_file)
load(params$data_file)
library(quarto)
load(params$data_file)
help
echo
library(quarto)
for (i in 1:8) {
data_path <- paste0("Data/season_", i, ".RData")  # adjust path if needed
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("Data/season_", i, ".RData")  # adjust path if needed
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
getwd()
list.files()
setwd("C:/Users/Administrator/Desktop/2023 SCHOOL/RR_git")
getwd()
list.files()
library(quarto)
for (i in 1:8) {
data_path <- paste0("Data/season_", i, ".RData")  # adjust path if needed
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("Data/season_", i, ".RData")  # adjust path if needed
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
install.packages("wkhtmltopdf")
install.packages("latexpdf")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_format = "pdf",
output_file = paste0("got_season_", i, ".pdf")
)
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_format = "pdf",
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_format = "pdf",
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_format = "pdf",
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf"))
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(latexpdf)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
getwd()
list.files()
setwd("C:/Users/Administrator/RRcourse2025/10. MD and Quarto 3")
getwd()
list.files()
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_format = "pdf",
output_file = paste0("got_season_", i, ".pdf")
)
library(quarto)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(latexpdf)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(latexpdf)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
library(latexpdf)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
library(latexpdf)
for (i in 1:8) {
data_path <- paste0("../Data/season_", i, ".RData")
quarto_render("My_assignment.qmd",
execute_params = list(
season_no = i,
data_file = data_path
),
output_file = paste0("got_season_", i, ".pdf")
)
}
